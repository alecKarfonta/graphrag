name: Build and Publish Docker Images

on:
  push:
    branches:
      - main
      - fix/build-issues  # Temporary: remove after merging
  pull_request:
    branches:
      - main

jobs:
  build-and-publish:
    runs-on: self-hosted
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Debug event information
        run: |
          echo "Event name: ${{ github.event_name }}"
          echo "Ref: ${{ github.ref }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Should push: ${{ github.event_name != 'pull_request' }}"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set lowercase repository owner
        run: |
          echo "REPOSITORY_OWNER_LOWERCASE=$(echo ${{ github.repository_owner }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Log in to the GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push API image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./backend/Dockerfile
          push: true  # Always push for now to debug
          tags: ghcr.io/${{ env.REPOSITORY_OWNER_LOWERCASE }}/graphrag-api:${{ github.sha }}
          cache-from: type=gha,scope=api
          cache-to: type=gha,scope=api,mode=max

      - name: Build and push Frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true  # Always push for now to debug
          tags: ghcr.io/${{ env.REPOSITORY_OWNER_LOWERCASE }}/graphrag-frontend:${{ github.sha }}
          cache-from: type=gha,scope=frontend
          cache-to: type=gha,scope=frontend,mode=max

      - name: Build and push Relationship API image
        uses: docker/build-push-action@v5
        with:
          context: ./rel_api
          file: ./rel_api/Dockerfile
          push: true  # Always push for now to debug
          tags: ghcr.io/${{ env.REPOSITORY_OWNER_LOWERCASE }}/graphrag-rel-api:${{ github.sha }}
          cache-from: type=gha,scope=rel-api
          cache-to: type=gha,scope=rel-api,mode=max

      - name: Build and push Reddit Crawler image
        uses: docker/build-push-action@v5
        with:
          context: ./reddit_crawler
          file: ./reddit_crawler/Dockerfile
          push: true  # Always push for now to debug
          tags: ghcr.io/${{ env.REPOSITORY_OWNER_LOWERCASE }}/graphrag-reddit-crawler:${{ github.sha }}
          cache-from: type=gha,scope=reddit-crawler
          cache-to: type=gha,scope=reddit-crawler,mode=max

      - name: Build and push NER API image
        uses: docker/build-push-action@v5
        with:
          context: ./ner_api
          file: ./ner_api/Dockerfile
          push: true  # Always push for now to debug
          tags: ghcr.io/${{ env.REPOSITORY_OWNER_LOWERCASE }}/graphrag-ner-api:${{ github.sha }}
          cache-from: type=gha,scope=ner-api
          cache-to: type=gha,scope=ner-api,mode=max

      - name: Build and push Code RAG image
        uses: docker/build-push-action@v5
        with:
          context: ./code_rag
          file: ./code_rag/Dockerfile
          push: true  # Always push for now to debug
          tags: ghcr.io/${{ env.REPOSITORY_OWNER_LOWERCASE }}/graphrag-code-rag:${{ github.sha }}
          cache-from: type=gha,scope=code-rag
          cache-to: type=gha,scope=code-rag,mode=max

  quick-test:
    runs-on: self-hosted
    needs: [build-and-publish]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install test dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest

      - name: Run syntax and import tests
        run: |
          echo "Running syntax checks..."
          python -m py_compile backend/main.py
          python -m py_compile tests/unit/test_llm_response.py
          echo "Basic syntax checks passed"

      - name: Test Docker images
        run: |
          echo "Testing built Docker images..."
          docker run --rm ghcr.io/aleckarfonta/graphrag-api:${{ github.sha }} python -c "import main; print('API image OK')" || echo "API image test failed"

  test:
    runs-on: self-hosted
    needs: [build-and-publish]
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt
          pip install pytest-xdist pytest-cov

      - name: Set up test environment
        run: |
          # Create test environment file
          echo "NEO4J_URI=bolt://localhost:7687" > .test.env
          echo "NEO4J_USER=neo4j" >> .test.env
          echo "NEO4J_PASSWORD=password" >> .test.env
          echo "QDRANT_URL=http://localhost:6333" >> .test.env
          echo "REDIS_URL=redis://localhost:16379" >> .test.env
          echo "DEBUG=True" >> .test.env
          echo "LOG_LEVEL=INFO" >> .test.env

      - name: Start test services
        run: |
          # Start core services needed for tests
          docker compose -f docker-compose.yml up -d neo4j qdrant redis
          
          # Wait for services to be ready
          echo "Waiting for services to start..."
          sleep 30
          
          # Check service health
          docker compose -f docker-compose.yml ps

      - name: Run unit tests
        run: |
          echo "Running unit tests..."
          export $(cat .test.env | xargs)
          python -m pytest tests/unit/ -v --tb=short --maxfail=5
        continue-on-error: true

      - name: Start application services for integration tests
        run: |
          # Start main application services including Code RAG for integration tests
          docker compose -f docker-compose.yml up -d api code-rag
          
          # Wait for services to be ready
          echo "Waiting for API and Code RAG to start..."
          sleep 90
          
          # Check API health
          curl -f http://localhost:8000/health || echo "API health check failed"
          
          # Check Code RAG health
          curl -f http://localhost:8003/health || echo "Code RAG health check failed"

      - name: Run integration tests
        run: |
          echo "Running integration tests..."
          export $(cat .test.env | xargs)
          python -m pytest tests/integration/ -v --tb=short --maxfail=3
        continue-on-error: true

      - name: Run system tests
        run: |
          echo "Running system tests..."
          export $(cat .test.env | xargs)
          python -m pytest tests/e2e/ -v --tb=short --maxfail=1
        continue-on-error: true

      - name: Collect test results
        if: always()
        run: |
          echo "Test run completed"
          echo "Check logs for any failures"
          docker compose -f docker-compose.yml logs --tail=100 api code-rag

      - name: Cleanup test environment
        if: always()
        run: |
          echo "Cleaning up test environment..."
          docker compose -f docker-compose.yml down --volumes --remove-orphans 