version: '3.8'

services:
  # Backend API
  api:
    build:
      context: .
      dockerfile: backend/Dockerfile
    ports:
      - "8000:8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    environment:
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=password
      - QDRANT_URL=http://qdrant:6333
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - FIRECRAWL_API_KEY=${FIRECRAWL_API_KEY}
      - DISABLE_LLM_FALLBACK=${DISABLE_LLM_FALLBACK:-false}
      - DEBUG=True
      - LOG_LEVEL=INFO
    depends_on:
      - neo4j
      - qdrant
    volumes:
      - ./backend:/app
      - api_data:/app/data
      - api_logs:/app/logs
      - api_cache:/app/.cache
      - api_models:/app/models
      - api_documents:/app/documents
      - api_exports:/app/exports
    networks:
      - graphrag-network
    restart: unless-stopped

  # Frontend
  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8000
    depends_on:
      - api
    volumes:
      - frontend_data:/app/data
      - frontend_logs:/app/logs
    networks:
      - graphrag-network
    restart: unless-stopped

  # Neo4j Database
  neo4j:
    image: neo4j:5.11
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    environment:
      - NEO4J_AUTH=neo4j/password
      - NEO4J_PLUGINS=["apoc"]
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*
      - NEO4J_dbms_security_procedures_allowlist=apoc.*
      - NEO4J_dbms_memory_heap_initial__size=512m
      - NEO4J_dbms_memory_heap_max__size=2g
      - NEO4J_dbms_memory_pagecache_size=1g
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_import:/var/lib/neo4j/import
      - neo4j_plugins:/plugins
      - neo4j_backup:/backup
    networks:
      - graphrag-network
    restart: unless-stopped

  # Qdrant Vector Database
  qdrant:
    image: qdrant/qdrant:latest
    ports:
      - "6333:6333"
      - "6334:6334"
    environment:
      - QDRANT__SERVICE__HTTP_PORT=6333
      - QDRANT__SERVICE__GRPC_PORT=6334
    volumes:
      - qdrant_data:/qdrant/storage
      - qdrant_logs:/qdrant/logs
      - qdrant_snapshots:/qdrant/snapshots
    networks:
      - graphrag-network
    restart: unless-stopped

  # Redis for caching
  redis:
    image: redis:7-alpine
    ports:
      - "16379:6379"
    command: redis-server --appendonly yes --maxmemory 512mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
      - redis_logs:/var/log/redis
    networks:
      - graphrag-network
    restart: unless-stopped

  # NER API Service
  ner-api:
    build:
      context: ./ner_api
      dockerfile: Dockerfile
    ports:
      - "8901:8001"
    environment:
      - HF_HOME=/app/.cache/huggingface
      - TRANSFORMERS_CACHE=/app/.cache/huggingface/transformers
    volumes:
      - ner_cache:/app/.cache
      - ner_models:/app/models
      - ner_logs:/app/logs
    networks:
      - graphrag-network
    restart: unless-stopped

  # Relationship Extraction API Service
  rel-api:
    build:
      context: ./rel_api
      dockerfile: Dockerfile
    ports:
      - "8002:8002"
    environment:
      - HF_HOME=/app/.cache/huggingface
      - TRANSFORMERS_CACHE=/app/.cache/huggingface/transformers
    volumes:
      - rel_cache:/app/.cache
      - rel_models:/app/models
      - rel_logs:/app/logs
    networks:
      - graphrag-network
    restart: unless-stopped

  # Reddit Crawler Service
  reddit-crawler:
    build:
      context: ./reddit_crawler
      dockerfile: Dockerfile
    ports:
      - "8903:8003"
    environment:
      - GRAPHRAG_API_URL=http://api:8000
      - REDDIT_CLIENT_ID=${REDDIT_CLIENT_ID}
      - REDDIT_CLIENT_SECRET=${REDDIT_CLIENT_SECRET}
      - REDDIT_USER_AGENT=${REDDIT_USER_AGENT:-GraphRAG-RedditCrawler/1.0}
    volumes:
      - reddit_crawler_logs:/app/logs
      - reddit_crawler_cache:/app/.cache
    networks:
      - graphrag-network
    restart: unless-stopped

volumes:
  # API persistent storage
  api_data:
    driver: local
  api_logs:
    driver: local
  api_cache:
    driver: local
  api_models:
    driver: local
  api_documents:
    driver: local
  api_exports:
    driver: local
  
  # Frontend persistent storage
  frontend_data:
    driver: local
  frontend_logs:
    driver: local
  
  # Neo4j persistent storage
  neo4j_data:
    driver: local
  neo4j_logs:
    driver: local
  neo4j_import:
    driver: local
  neo4j_plugins:
    driver: local
  neo4j_backup:
    driver: local
  
  # Qdrant persistent storage
  qdrant_data:
    driver: local
  qdrant_logs:
    driver: local
  qdrant_snapshots:
    driver: local
  
  # Redis persistent storage
  redis_data:
    driver: local
  redis_logs:
    driver: local
  
  # NER API persistent storage
  ner_cache:
    driver: local
  ner_models:
    driver: local
  ner_logs:
    driver: local
  
  # Relationship API persistent storage
  rel_cache:
    driver: local
  rel_models:
    driver: local
  rel_logs:
    driver: local
  
  # Reddit Crawler persistent storage
  reddit_crawler_logs:
    driver: local
  reddit_crawler_cache:
    driver: local

networks:
  graphrag-network:
    driver: bridge 